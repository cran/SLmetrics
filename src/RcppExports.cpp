// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/SLmetrics.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// accuracy
double accuracy(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_accuracy(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(accuracy(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_accuracy
double weighted_accuracy(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_accuracy(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_accuracy(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_accuracy
double cmatrix_accuracy(const Rcpp::NumericMatrix& x);
RcppExport SEXP _SLmetrics_cmatrix_accuracy(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_accuracy(x));
    return rcpp_result_gen;
END_RCPP
}
// balanced_accuracy
double balanced_accuracy(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const bool& adjust, bool na_rm);
RcppExport SEXP _SLmetrics_balanced_accuracy(SEXP actualSEXP, SEXP predictedSEXP, SEXP adjustSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const bool& >::type adjust(adjustSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(balanced_accuracy(actual, predicted, adjust, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_balanced_accuracy
double weighted_balanced_accuracy(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const bool& adjust, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_balanced_accuracy(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP adjustSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const bool& >::type adjust(adjustSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_balanced_accuracy(actual, predicted, w, adjust, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_balanced_accuracy
double cmatrix_balanced_accuracy(const Rcpp::NumericMatrix& x, const bool& adjust, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_balanced_accuracy(SEXP xSEXP, SEXP adjustSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool& >::type adjust(adjustSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_balanced_accuracy(x, adjust, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// brier_score
double brier_score(const Rcpp::NumericMatrix& ok, const Rcpp::NumericMatrix& qk);
RcppExport SEXP _SLmetrics_brier_score(SEXP okSEXP, SEXP qkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type ok(okSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type qk(qkSEXP);
    rcpp_result_gen = Rcpp::wrap(brier_score(ok, qk));
    return rcpp_result_gen;
END_RCPP
}
// weighted_brier_score
double weighted_brier_score(const Rcpp::NumericMatrix& ok, const Rcpp::NumericMatrix& qk, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_brier_score(SEXP okSEXP, SEXP qkSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type ok(okSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type qk(qkSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_brier_score(ok, qk, w));
    return rcpp_result_gen;
END_RCPP
}
// cohens_kappa
double cohens_kappa(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const double& beta);
RcppExport SEXP _SLmetrics_cohens_kappa(SEXP actualSEXP, SEXP predictedSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(cohens_kappa(actual, predicted, beta));
    return rcpp_result_gen;
END_RCPP
}
// weighted_cohens_kappa
double weighted_cohens_kappa(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const double& beta);
RcppExport SEXP _SLmetrics_weighted_cohens_kappa(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_cohens_kappa(actual, predicted, w, beta));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_cohens_kappa
double cmatrix_cohens_kappa(const Rcpp::NumericMatrix& x, const double& beta);
RcppExport SEXP _SLmetrics_cmatrix_cohens_kappa(SEXP xSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_cohens_kappa(x, beta));
    return rcpp_result_gen;
END_RCPP
}
// confusion_matrix
Rcpp::NumericMatrix confusion_matrix(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_confusion_matrix(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(confusion_matrix(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_confusion_matrix
Rcpp::NumericMatrix weighted_confusion_matrix(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_confusion_matrix(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_confusion_matrix(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// cross_entropy
Rcpp::NumericVector cross_entropy(const Rcpp::NumericMatrix& pk, const Rcpp::NumericMatrix& qk, const int& dim, bool normalize);
RcppExport SEXP _SLmetrics_cross_entropy(SEXP pkSEXP, SEXP qkSEXP, SEXP dimSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type pk(pkSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type qk(qkSEXP);
    Rcpp::traits::input_parameter< const int& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cross_entropy(pk, qk, dim, normalize));
    return rcpp_result_gen;
END_RCPP
}
// diagnostic_odds_ratio
double diagnostic_odds_ratio(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_diagnostic_odds_ratio(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(diagnostic_odds_ratio(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_diagnostic_odds_ratio
double weighted_diagnostic_odds_ratio(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_diagnostic_odds_ratio(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_diagnostic_odds_ratio(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_diagnostic_odds_ratio
double cmatrix_diagnostic_odds_ratio(const Rcpp::NumericMatrix& x);
RcppExport SEXP _SLmetrics_cmatrix_diagnostic_odds_ratio(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_diagnostic_odds_ratio(x));
    return rcpp_result_gen;
END_RCPP
}
// fbeta_score
Rcpp::NumericVector fbeta_score(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const double& beta, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_fbeta_score(SEXP actualSEXP, SEXP predictedSEXP, SEXP betaSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fbeta_score(actual, predicted, beta, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_fbeta_score
Rcpp::NumericVector weighted_fbeta_score(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const double& beta, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_fbeta_score(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP betaSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_fbeta_score(actual, predicted, w, beta, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_fbeta_score
Rcpp::NumericVector cmatrix_fbeta_score(const Rcpp::NumericMatrix& x, const double& beta, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_fbeta_score(SEXP xSEXP, SEXP betaSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_fbeta_score(x, beta, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// false_discovery_rate
Rcpp::NumericVector false_discovery_rate(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_false_discovery_rate(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(false_discovery_rate(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_false_discovery_rate
Rcpp::NumericVector weighted_false_discovery_rate(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_false_discovery_rate(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_false_discovery_rate(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_false_discovery_rate
Rcpp::NumericVector cmatrix_false_discovery_rate(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_false_discovery_rate(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_false_discovery_rate(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// false_omission_rate
Rcpp::NumericVector false_omission_rate(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_false_omission_rate(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(false_omission_rate(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_false_omission_rate
Rcpp::NumericVector weighted_false_omission_rate(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_false_omission_rate(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_false_omission_rate(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_false_omission_rate
Rcpp::NumericVector cmatrix_false_omission_rate(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_false_omission_rate(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_false_omission_rate(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// false_positive_rate
Rcpp::NumericVector false_positive_rate(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, const bool& na_rm);
RcppExport SEXP _SLmetrics_false_positive_rate(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(false_positive_rate(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_false_positive_rate
Rcpp::NumericVector weighted_false_positive_rate(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, const bool& na_rm);
RcppExport SEXP _SLmetrics_weighted_false_positive_rate(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_false_positive_rate(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_false_positive_rate
Rcpp::NumericVector cmatrix_false_positive_rate(const Rcpp::NumericMatrix& x, const int& estimator, const bool& na_rm);
RcppExport SEXP _SLmetrics_cmatrix_false_positive_rate(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_false_positive_rate(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fallout
Rcpp::NumericVector fallout(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, const bool& na_rm);
RcppExport SEXP _SLmetrics_fallout(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fallout(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_fallout
Rcpp::NumericVector weighted_fallout(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, const bool& na_rm);
RcppExport SEXP _SLmetrics_weighted_fallout(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_fallout(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_fallout
Rcpp::NumericVector cmatrix_fallout(const Rcpp::NumericMatrix& x, const int& estimator, const bool& na_rm);
RcppExport SEXP _SLmetrics_cmatrix_fallout(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< const bool& >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_fallout(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fowlkes_mallows_index
double fowlkes_mallows_index(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_fowlkes_mallows_index(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(fowlkes_mallows_index(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_fowlkes_mallows_index
double weighted_fowlkes_mallows_index(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_fowlkes_mallows_index(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_fowlkes_mallows_index(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_fowlkes_mallows_index
double cmatrix_fowlkes_mallows_index(const Rcpp::NumericMatrix& x);
RcppExport SEXP _SLmetrics_cmatrix_fowlkes_mallows_index(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_fowlkes_mallows_index(x));
    return rcpp_result_gen;
END_RCPP
}
// hamming_loss
double hamming_loss(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_hamming_loss(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(hamming_loss(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_hamming_loss
double weighted_hamming_loss(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_hamming_loss(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_hamming_loss(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_hamming_loss
double cmatrix_hamming_loss(const Rcpp::NumericMatrix& x);
RcppExport SEXP _SLmetrics_cmatrix_hamming_loss(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_hamming_loss(x));
    return rcpp_result_gen;
END_RCPP
}
// jaccard_score
Rcpp::NumericVector jaccard_score(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_jaccard_score(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccard_score(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_jaccard_score
Rcpp::NumericVector weighted_jaccard_score(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_jaccard_score(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_jaccard_score(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_jaccard_score
Rcpp::NumericVector cmatrix_jaccard_score(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_jaccard_score(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_jaccard_score(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// critical_success_index
Rcpp::NumericVector critical_success_index(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_critical_success_index(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(critical_success_index(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_critical_success_index
Rcpp::NumericVector weighted_critical_success_index(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_critical_success_index(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_critical_success_index(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_critical_success_index
Rcpp::NumericVector cmatrix_critical_success_index(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_critical_success_index(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_critical_success_index(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// threat_score
Rcpp::NumericVector threat_score(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_threat_score(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(threat_score(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_threat_score
Rcpp::NumericVector weighted_threat_score(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_threat_score(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_threat_score(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_threat_score
Rcpp::NumericVector cmatrix_threat_score(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_threat_score(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_threat_score(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// LogLoss
double LogLoss(const Rcpp::IntegerVector& actual, const Rcpp::NumericMatrix& response, const bool normalize);
RcppExport SEXP _SLmetrics_LogLoss(SEXP actualSEXP, SEXP responseSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLoss(actual, response, normalize));
    return rcpp_result_gen;
END_RCPP
}
// weighted_LogLoss
double weighted_LogLoss(const Rcpp::IntegerVector& actual, const Rcpp::NumericMatrix& response, const Rcpp::NumericVector& w, const bool normalize);
RcppExport SEXP _SLmetrics_weighted_LogLoss(SEXP actualSEXP, SEXP responseSEXP, SEXP wSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_LogLoss(actual, response, w, normalize));
    return rcpp_result_gen;
END_RCPP
}
// mcc
double mcc(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_mcc(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(mcc(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_mcc
double weighted_mcc(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_mcc(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_mcc(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_mcc
double cmatrix_mcc(const Rcpp::NumericMatrix& x);
RcppExport SEXP _SLmetrics_cmatrix_mcc(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_mcc(x));
    return rcpp_result_gen;
END_RCPP
}
// phi_coefficient
double phi_coefficient(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_phi_coefficient(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(phi_coefficient(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_phi_coefficient
double weighted_phi_coefficient(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_phi_coefficient(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_phi_coefficient(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_phi_coefficient
double cmatrix_phi_coefficient(const Rcpp::NumericMatrix& x);
RcppExport SEXP _SLmetrics_cmatrix_phi_coefficient(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_phi_coefficient(x));
    return rcpp_result_gen;
END_RCPP
}
// negative_likelihood_ratio
double negative_likelihood_ratio(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_negative_likelihood_ratio(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(negative_likelihood_ratio(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_negative_likelihood_ratio
double weighted_negative_likelihood_ratio(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_negative_likelihood_ratio(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_negative_likelihood_ratio(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_negative_likelihood_ratio
double cmatrix_negative_likelihood_ratio(const Rcpp::NumericMatrix& x);
RcppExport SEXP _SLmetrics_cmatrix_negative_likelihood_ratio(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_negative_likelihood_ratio(x));
    return rcpp_result_gen;
END_RCPP
}
// negative_predictive_value
Rcpp::NumericVector negative_predictive_value(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_negative_predictive_value(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(negative_predictive_value(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_negative_predictive_value
Rcpp::NumericVector weighted_negative_predictive_value(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_negative_predictive_value(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_negative_predictive_value(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_negative_predictive_value
Rcpp::NumericVector cmatrix_negative_predictive_value(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_negative_predictive_value(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_negative_predictive_value(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// positive_likelihood_ratio
double positive_likelihood_ratio(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_positive_likelihood_ratio(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(positive_likelihood_ratio(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_positive_likelihood_ratio
double weighted_positive_likelihood_ratio(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_positive_likelihood_ratio(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_positive_likelihood_ratio(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_positive_likelihood_ratio
double cmatrix_positive_likelihood_ratio(const Rcpp::NumericMatrix& x);
RcppExport SEXP _SLmetrics_cmatrix_positive_likelihood_ratio(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_positive_likelihood_ratio(x));
    return rcpp_result_gen;
END_RCPP
}
// precision
Rcpp::NumericVector precision(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_precision(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(precision(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_precision
Rcpp::NumericVector weighted_precision(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_precision(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_precision(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_precision
Rcpp::NumericVector cmatrix_precision(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_precision(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_precision(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// ppv
Rcpp::NumericVector ppv(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_ppv(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(ppv(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_ppv_score
Rcpp::NumericVector weighted_ppv_score(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_ppv_score(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_ppv_score(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_ppv_score
Rcpp::NumericVector cmatrix_ppv_score(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_ppv_score(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_ppv_score(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// precision_recall_curve
Rcpp::DataFrame precision_recall_curve(const Rcpp::IntegerVector& actual, const Rcpp::NumericMatrix& response, Rcpp::Nullable<Rcpp::NumericVector> thresholds, Rcpp::Nullable<Rcpp::IntegerMatrix> indices);
RcppExport SEXP _SLmetrics_precision_recall_curve(SEXP actualSEXP, SEXP responseSEXP, SEXP thresholdsSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(precision_recall_curve(actual, response, thresholds, indices));
    return rcpp_result_gen;
END_RCPP
}
// weighted_precision_recall_curve
Rcpp::DataFrame weighted_precision_recall_curve(const Rcpp::IntegerVector& actual, const Rcpp::NumericMatrix& response, const Rcpp::NumericVector& w, Rcpp::Nullable<Rcpp::NumericVector> thresholds, Rcpp::Nullable<Rcpp::IntegerMatrix> indices);
RcppExport SEXP _SLmetrics_weighted_precision_recall_curve(SEXP actualSEXP, SEXP responseSEXP, SEXP wSEXP, SEXP thresholdsSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_precision_recall_curve(actual, response, w, thresholds, indices));
    return rcpp_result_gen;
END_RCPP
}
// precision_recall_auc
Rcpp::NumericVector precision_recall_auc(const Rcpp::IntegerVector& actual, const Rcpp::NumericMatrix& response, int estimator, int method, Rcpp::Nullable<Rcpp::IntegerMatrix> indices);
RcppExport SEXP _SLmetrics_precision_recall_auc(SEXP actualSEXP, SEXP responseSEXP, SEXP estimatorSEXP, SEXP methodSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< int >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(precision_recall_auc(actual, response, estimator, method, indices));
    return rcpp_result_gen;
END_RCPP
}
// precision_recall_auc_weighted
Rcpp::NumericVector precision_recall_auc_weighted(const Rcpp::IntegerVector& actual, const Rcpp::NumericMatrix& response, const Rcpp::NumericVector& w, int estimator, int method, Rcpp::Nullable<Rcpp::IntegerMatrix> indices);
RcppExport SEXP _SLmetrics_precision_recall_auc_weighted(SEXP actualSEXP, SEXP responseSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP methodSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(precision_recall_auc_weighted(actual, response, w, estimator, method, indices));
    return rcpp_result_gen;
END_RCPP
}
// recall_score
Rcpp::NumericVector recall_score(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_recall_score(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(recall_score(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_recall_score
Rcpp::NumericVector weighted_recall_score(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_recall_score(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_recall_score(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_recall_score
Rcpp::NumericVector cmatrix_recall_score(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_recall_score(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_recall_score(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// sensitivity_score
Rcpp::NumericVector sensitivity_score(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_sensitivity_score(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(sensitivity_score(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_sensitivity_score
Rcpp::NumericVector weighted_sensitivity_score(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_sensitivity_score(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_sensitivity_score(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_sensitivity_score
Rcpp::NumericVector cmatrix_sensitivity_score(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_sensitivity_score(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_sensitivity_score(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// true_positive_rate
Rcpp::NumericVector true_positive_rate(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_true_positive_rate(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(true_positive_rate(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_true_positive_rate
Rcpp::NumericVector weighted_true_positive_rate(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_true_positive_rate(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_true_positive_rate(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_true_positive_rate
Rcpp::NumericVector cmatrix_true_positive_rate(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_true_positive_rate(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_true_positive_rate(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// roc_curve_unweighted
Rcpp::DataFrame roc_curve_unweighted(const Rcpp::IntegerVector& actual, const Rcpp::NumericMatrix& response, Rcpp::Nullable<Rcpp::NumericVector> thresholds, Rcpp::Nullable<Rcpp::IntegerMatrix> indices);
RcppExport SEXP _SLmetrics_roc_curve_unweighted(SEXP actualSEXP, SEXP responseSEXP, SEXP thresholdsSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(roc_curve_unweighted(actual, response, thresholds, indices));
    return rcpp_result_gen;
END_RCPP
}
// roc_curve_weighted
Rcpp::DataFrame roc_curve_weighted(const Rcpp::IntegerVector& actual, const Rcpp::NumericMatrix& response, const Rcpp::NumericVector& w, Rcpp::Nullable<Rcpp::NumericVector> thresholds, Rcpp::Nullable<Rcpp::IntegerMatrix> indices);
RcppExport SEXP _SLmetrics_roc_curve_weighted(SEXP actualSEXP, SEXP responseSEXP, SEXP wSEXP, SEXP thresholdsSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(roc_curve_weighted(actual, response, w, thresholds, indices));
    return rcpp_result_gen;
END_RCPP
}
// roc_auc
Rcpp::NumericVector roc_auc(const Rcpp::IntegerVector& actual, const Rcpp::NumericMatrix& response, int estimator, int method, Rcpp::Nullable<Rcpp::IntegerMatrix> indices);
RcppExport SEXP _SLmetrics_roc_auc(SEXP actualSEXP, SEXP responseSEXP, SEXP estimatorSEXP, SEXP methodSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< int >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(roc_auc(actual, response, estimator, method, indices));
    return rcpp_result_gen;
END_RCPP
}
// roc_auc_weighted
Rcpp::NumericVector roc_auc_weighted(const Rcpp::IntegerVector& actual, const Rcpp::NumericMatrix& response, const Rcpp::NumericVector& w, int estimator, int method, Rcpp::Nullable<Rcpp::IntegerMatrix> indices);
RcppExport SEXP _SLmetrics_roc_auc_weighted(SEXP actualSEXP, SEXP responseSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP methodSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(roc_auc_weighted(actual, response, w, estimator, method, indices));
    return rcpp_result_gen;
END_RCPP
}
// relative_entropy
Rcpp::NumericVector relative_entropy(const Rcpp::NumericMatrix& pk, const Rcpp::NumericMatrix& qk, const int& dim, bool normalize);
RcppExport SEXP _SLmetrics_relative_entropy(SEXP pkSEXP, SEXP qkSEXP, SEXP dimSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type pk(pkSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type qk(qkSEXP);
    Rcpp::traits::input_parameter< const int& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(relative_entropy(pk, qk, dim, normalize));
    return rcpp_result_gen;
END_RCPP
}
// shannon_entropy
Rcpp::NumericVector shannon_entropy(const Rcpp::NumericMatrix& pk, const int& dim, bool normalize);
RcppExport SEXP _SLmetrics_shannon_entropy(SEXP pkSEXP, SEXP dimSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type pk(pkSEXP);
    Rcpp::traits::input_parameter< const int& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(shannon_entropy(pk, dim, normalize));
    return rcpp_result_gen;
END_RCPP
}
// specificity
Rcpp::NumericVector specificity(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_specificity(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(specificity(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_specificity
Rcpp::NumericVector weighted_specificity(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_specificity(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_specificity(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_specificity
Rcpp::NumericVector cmatrix_specificity(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_specificity(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_specificity(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// true_negative_rate
Rcpp::NumericVector true_negative_rate(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_true_negative_rate(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(true_negative_rate(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_true_negative_rate
Rcpp::NumericVector weighted_true_negative_rate(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_true_negative_rate(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_true_negative_rate(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_true_negative_rate
Rcpp::NumericVector cmatrix_true_negative_rate(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_true_negative_rate(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_true_negative_rate(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// selectivity
Rcpp::NumericVector selectivity(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_selectivity(SEXP actualSEXP, SEXP predictedSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(selectivity(actual, predicted, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// weighted_selectivity
Rcpp::NumericVector weighted_selectivity(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_weighted_selectivity(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_selectivity(actual, predicted, w, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_selectivity
Rcpp::NumericVector cmatrix_selectivity(const Rcpp::NumericMatrix& x, const int& estimator, bool na_rm);
RcppExport SEXP _SLmetrics_cmatrix_selectivity(SEXP xSEXP, SEXP estimatorSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_selectivity(x, estimator, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// zero_one_loss
double zero_one_loss(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted);
RcppExport SEXP _SLmetrics_zero_one_loss(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(zero_one_loss(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_zero_one_loss
double weighted_zero_one_loss(const Rcpp::IntegerVector& actual, const Rcpp::IntegerVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_zero_one_loss(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_zero_one_loss(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// cmatrix_zero_one_loss
double cmatrix_zero_one_loss(const Rcpp::NumericMatrix& x);
RcppExport SEXP _SLmetrics_cmatrix_zero_one_loss(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cmatrix_zero_one_loss(x));
    return rcpp_result_gen;
END_RCPP
}
// PoissonLogLoss
double PoissonLogLoss(const Rcpp::IntegerVector& actual, const Rcpp::NumericVector& response, const bool normalize);
RcppExport SEXP _SLmetrics_PoissonLogLoss(SEXP actualSEXP, SEXP responseSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(PoissonLogLoss(actual, response, normalize));
    return rcpp_result_gen;
END_RCPP
}
// weighted_PoissonLogLoss
double weighted_PoissonLogLoss(const Rcpp::IntegerVector& actual, const Rcpp::NumericVector& response, const Rcpp::NumericVector& w, const bool normalize);
RcppExport SEXP _SLmetrics_weighted_PoissonLogLoss(SEXP actualSEXP, SEXP responseSEXP, SEXP wSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_PoissonLogLoss(actual, response, w, normalize));
    return rcpp_result_gen;
END_RCPP
}
// rsq
double rsq(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, double k);
RcppExport SEXP _SLmetrics_rsq(SEXP actualSEXP, SEXP predictedSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(rsq(actual, predicted, k));
    return rcpp_result_gen;
END_RCPP
}
// weighted_rsq
double weighted_rsq(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w, double k);
RcppExport SEXP _SLmetrics_weighted_rsq(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_rsq(actual, predicted, w, k));
    return rcpp_result_gen;
END_RCPP
}
// ccc
double ccc(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, bool correction);
RcppExport SEXP _SLmetrics_ccc(SEXP actualSEXP, SEXP predictedSEXP, SEXP correctionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< bool >::type correction(correctionSEXP);
    rcpp_result_gen = Rcpp::wrap(ccc(actual, predicted, correction));
    return rcpp_result_gen;
END_RCPP
}
// weighted_ccc
double weighted_ccc(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w, bool correction);
RcppExport SEXP _SLmetrics_weighted_ccc(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP correctionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type correction(correctionSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_ccc(actual, predicted, w, correction));
    return rcpp_result_gen;
END_RCPP
}
// gamma_deviance
double gamma_deviance(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_gamma_deviance(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_deviance(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_gamma_deviance
double weighted_gamma_deviance(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_gamma_deviance(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_gamma_deviance(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// gmse
double gmse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_gmse(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(gmse(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_gmse
double weighted_gmse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_gmse(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_gmse(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// huberloss
double huberloss(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, double delta);
RcppExport SEXP _SLmetrics_huberloss(SEXP actualSEXP, SEXP predictedSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(huberloss(actual, predicted, delta));
    return rcpp_result_gen;
END_RCPP
}
// weighted_huberloss
double weighted_huberloss(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w, double delta);
RcppExport SEXP _SLmetrics_weighted_huberloss(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_huberloss(actual, predicted, w, delta));
    return rcpp_result_gen;
END_RCPP
}
// mae
double mae(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_mae(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(mae(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_mae
double weighted_mae(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_mae(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_mae(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// mape
double mape(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_mape(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(mape(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_mape
double weighted_mape(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_mape(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_mape(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// maape
double maape(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_maape(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(maape(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_maape
double weighted_maape(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_maape(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_maape(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// mpe
double mpe(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_mpe(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(mpe(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_mpe
double weighted_mpe(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_mpe(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_mpe(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// mse
double mse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_mse(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(mse(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_mse
double weighted_mse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_mse(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_mse(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// pinball
double pinball(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, double alpha, bool deviance);
RcppExport SEXP _SLmetrics_pinball(SEXP actualSEXP, SEXP predictedSEXP, SEXP alphaSEXP, SEXP devianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type deviance(devianceSEXP);
    rcpp_result_gen = Rcpp::wrap(pinball(actual, predicted, alpha, deviance));
    return rcpp_result_gen;
END_RCPP
}
// weighted_pinball
double weighted_pinball(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w, double alpha, bool deviance);
RcppExport SEXP _SLmetrics_weighted_pinball(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP alphaSEXP, SEXP devianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type deviance(devianceSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_pinball(actual, predicted, w, alpha, deviance));
    return rcpp_result_gen;
END_RCPP
}
// poisson_deviance
double poisson_deviance(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_poisson_deviance(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_deviance(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_poisson_deviance
double weighted_poisson_deviance(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_poisson_deviance(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_poisson_deviance(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// rae
double rae(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_rae(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(rae(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_rae
double weighted_rae(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_rae(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_rae(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// RelativeRootMeanSquaredError
double RelativeRootMeanSquaredError(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const int normalization);
RcppExport SEXP _SLmetrics_RelativeRootMeanSquaredError(SEXP actualSEXP, SEXP predictedSEXP, SEXP normalizationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const int >::type normalization(normalizationSEXP);
    rcpp_result_gen = Rcpp::wrap(RelativeRootMeanSquaredError(actual, predicted, normalization));
    return rcpp_result_gen;
END_RCPP
}
// weighted_RelativeRootMeanSquaredError
double weighted_RelativeRootMeanSquaredError(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w, const int normalization);
RcppExport SEXP _SLmetrics_weighted_RelativeRootMeanSquaredError(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP normalizationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int >::type normalization(normalizationSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_RelativeRootMeanSquaredError(actual, predicted, w, normalization));
    return rcpp_result_gen;
END_RCPP
}
// rmse
double rmse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_rmse(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(rmse(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_rmse
double weighted_rmse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_rmse(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_rmse(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// rmsle
double rmsle(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_rmsle(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(rmsle(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_rmsle
double weighted_rmsle(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_rmsle(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_rmsle(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// rrse
double rrse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_rrse(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(rrse(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_rrse
double weighted_rrse(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_rrse(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_rrse(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// smape
double smape(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted);
RcppExport SEXP _SLmetrics_smape(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(smape(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// weighted_smape
double weighted_smape(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w);
RcppExport SEXP _SLmetrics_weighted_smape(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_smape(actual, predicted, w));
    return rcpp_result_gen;
END_RCPP
}
// tweedie_deviance
double tweedie_deviance(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, double power);
RcppExport SEXP _SLmetrics_tweedie_deviance(SEXP actualSEXP, SEXP predictedSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(tweedie_deviance(actual, predicted, power));
    return rcpp_result_gen;
END_RCPP
}
// weighted_tweedie_deviance
double weighted_tweedie_deviance(const Rcpp::NumericVector& actual, const Rcpp::NumericVector& predicted, const Rcpp::NumericVector& w, double power);
RcppExport SEXP _SLmetrics_weighted_tweedie_deviance(SEXP actualSEXP, SEXP predictedSEXP, SEXP wSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_tweedie_deviance(actual, predicted, w, power));
    return rcpp_result_gen;
END_RCPP
}
// auc
double auc(const Rcpp::NumericVector& y, const Rcpp::NumericVector& x, const int& method, const bool& presorted);
RcppExport SEXP _SLmetrics_auc(SEXP ySEXP, SEXP xSEXP, SEXP methodSEXP, SEXP presortedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const bool& >::type presorted(presortedSEXP);
    rcpp_result_gen = Rcpp::wrap(auc(y, x, method, presorted));
    return rcpp_result_gen;
END_RCPP
}
// openmp_available
bool openmp_available();
RcppExport SEXP _SLmetrics_openmp_available() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(openmp_available());
    return rcpp_result_gen;
END_RCPP
}
// enable_openmp
bool enable_openmp();
RcppExport SEXP _SLmetrics_enable_openmp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(enable_openmp());
    return rcpp_result_gen;
END_RCPP
}
// disable_openmp
bool disable_openmp();
RcppExport SEXP _SLmetrics_disable_openmp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(disable_openmp());
    return rcpp_result_gen;
END_RCPP
}
// available_threads
int available_threads();
RcppExport SEXP _SLmetrics_available_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(available_threads());
    return rcpp_result_gen;
END_RCPP
}
// use_threads
int use_threads(int value);
RcppExport SEXP _SLmetrics_use_threads(SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(use_threads(value));
    return rcpp_result_gen;
END_RCPP
}
// sort_matrix
Rcpp::NumericMatrix sort_matrix(Rcpp::NumericMatrix x, bool decreasing);
RcppExport SEXP _SLmetrics_sort_matrix(SEXP xSEXP, SEXP decreasingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type decreasing(decreasingSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_matrix(x, decreasing));
    return rcpp_result_gen;
END_RCPP
}
// order_matrix
Rcpp::IntegerMatrix order_matrix(Rcpp::NumericMatrix x, bool decreasing);
RcppExport SEXP _SLmetrics_order_matrix(SEXP xSEXP, SEXP decreasingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type decreasing(decreasingSEXP);
    rcpp_result_gen = Rcpp::wrap(order_matrix(x, decreasing));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SLmetrics_accuracy", (DL_FUNC) &_SLmetrics_accuracy, 2},
    {"_SLmetrics_weighted_accuracy", (DL_FUNC) &_SLmetrics_weighted_accuracy, 3},
    {"_SLmetrics_cmatrix_accuracy", (DL_FUNC) &_SLmetrics_cmatrix_accuracy, 1},
    {"_SLmetrics_balanced_accuracy", (DL_FUNC) &_SLmetrics_balanced_accuracy, 4},
    {"_SLmetrics_weighted_balanced_accuracy", (DL_FUNC) &_SLmetrics_weighted_balanced_accuracy, 5},
    {"_SLmetrics_cmatrix_balanced_accuracy", (DL_FUNC) &_SLmetrics_cmatrix_balanced_accuracy, 3},
    {"_SLmetrics_brier_score", (DL_FUNC) &_SLmetrics_brier_score, 2},
    {"_SLmetrics_weighted_brier_score", (DL_FUNC) &_SLmetrics_weighted_brier_score, 3},
    {"_SLmetrics_cohens_kappa", (DL_FUNC) &_SLmetrics_cohens_kappa, 3},
    {"_SLmetrics_weighted_cohens_kappa", (DL_FUNC) &_SLmetrics_weighted_cohens_kappa, 4},
    {"_SLmetrics_cmatrix_cohens_kappa", (DL_FUNC) &_SLmetrics_cmatrix_cohens_kappa, 2},
    {"_SLmetrics_confusion_matrix", (DL_FUNC) &_SLmetrics_confusion_matrix, 2},
    {"_SLmetrics_weighted_confusion_matrix", (DL_FUNC) &_SLmetrics_weighted_confusion_matrix, 3},
    {"_SLmetrics_cross_entropy", (DL_FUNC) &_SLmetrics_cross_entropy, 4},
    {"_SLmetrics_diagnostic_odds_ratio", (DL_FUNC) &_SLmetrics_diagnostic_odds_ratio, 2},
    {"_SLmetrics_weighted_diagnostic_odds_ratio", (DL_FUNC) &_SLmetrics_weighted_diagnostic_odds_ratio, 3},
    {"_SLmetrics_cmatrix_diagnostic_odds_ratio", (DL_FUNC) &_SLmetrics_cmatrix_diagnostic_odds_ratio, 1},
    {"_SLmetrics_fbeta_score", (DL_FUNC) &_SLmetrics_fbeta_score, 5},
    {"_SLmetrics_weighted_fbeta_score", (DL_FUNC) &_SLmetrics_weighted_fbeta_score, 6},
    {"_SLmetrics_cmatrix_fbeta_score", (DL_FUNC) &_SLmetrics_cmatrix_fbeta_score, 4},
    {"_SLmetrics_false_discovery_rate", (DL_FUNC) &_SLmetrics_false_discovery_rate, 4},
    {"_SLmetrics_weighted_false_discovery_rate", (DL_FUNC) &_SLmetrics_weighted_false_discovery_rate, 5},
    {"_SLmetrics_cmatrix_false_discovery_rate", (DL_FUNC) &_SLmetrics_cmatrix_false_discovery_rate, 3},
    {"_SLmetrics_false_omission_rate", (DL_FUNC) &_SLmetrics_false_omission_rate, 4},
    {"_SLmetrics_weighted_false_omission_rate", (DL_FUNC) &_SLmetrics_weighted_false_omission_rate, 5},
    {"_SLmetrics_cmatrix_false_omission_rate", (DL_FUNC) &_SLmetrics_cmatrix_false_omission_rate, 3},
    {"_SLmetrics_false_positive_rate", (DL_FUNC) &_SLmetrics_false_positive_rate, 4},
    {"_SLmetrics_weighted_false_positive_rate", (DL_FUNC) &_SLmetrics_weighted_false_positive_rate, 5},
    {"_SLmetrics_cmatrix_false_positive_rate", (DL_FUNC) &_SLmetrics_cmatrix_false_positive_rate, 3},
    {"_SLmetrics_fallout", (DL_FUNC) &_SLmetrics_fallout, 4},
    {"_SLmetrics_weighted_fallout", (DL_FUNC) &_SLmetrics_weighted_fallout, 5},
    {"_SLmetrics_cmatrix_fallout", (DL_FUNC) &_SLmetrics_cmatrix_fallout, 3},
    {"_SLmetrics_fowlkes_mallows_index", (DL_FUNC) &_SLmetrics_fowlkes_mallows_index, 2},
    {"_SLmetrics_weighted_fowlkes_mallows_index", (DL_FUNC) &_SLmetrics_weighted_fowlkes_mallows_index, 3},
    {"_SLmetrics_cmatrix_fowlkes_mallows_index", (DL_FUNC) &_SLmetrics_cmatrix_fowlkes_mallows_index, 1},
    {"_SLmetrics_hamming_loss", (DL_FUNC) &_SLmetrics_hamming_loss, 2},
    {"_SLmetrics_weighted_hamming_loss", (DL_FUNC) &_SLmetrics_weighted_hamming_loss, 3},
    {"_SLmetrics_cmatrix_hamming_loss", (DL_FUNC) &_SLmetrics_cmatrix_hamming_loss, 1},
    {"_SLmetrics_jaccard_score", (DL_FUNC) &_SLmetrics_jaccard_score, 4},
    {"_SLmetrics_weighted_jaccard_score", (DL_FUNC) &_SLmetrics_weighted_jaccard_score, 5},
    {"_SLmetrics_cmatrix_jaccard_score", (DL_FUNC) &_SLmetrics_cmatrix_jaccard_score, 3},
    {"_SLmetrics_critical_success_index", (DL_FUNC) &_SLmetrics_critical_success_index, 4},
    {"_SLmetrics_weighted_critical_success_index", (DL_FUNC) &_SLmetrics_weighted_critical_success_index, 5},
    {"_SLmetrics_cmatrix_critical_success_index", (DL_FUNC) &_SLmetrics_cmatrix_critical_success_index, 3},
    {"_SLmetrics_threat_score", (DL_FUNC) &_SLmetrics_threat_score, 4},
    {"_SLmetrics_weighted_threat_score", (DL_FUNC) &_SLmetrics_weighted_threat_score, 5},
    {"_SLmetrics_cmatrix_threat_score", (DL_FUNC) &_SLmetrics_cmatrix_threat_score, 3},
    {"_SLmetrics_LogLoss", (DL_FUNC) &_SLmetrics_LogLoss, 3},
    {"_SLmetrics_weighted_LogLoss", (DL_FUNC) &_SLmetrics_weighted_LogLoss, 4},
    {"_SLmetrics_mcc", (DL_FUNC) &_SLmetrics_mcc, 2},
    {"_SLmetrics_weighted_mcc", (DL_FUNC) &_SLmetrics_weighted_mcc, 3},
    {"_SLmetrics_cmatrix_mcc", (DL_FUNC) &_SLmetrics_cmatrix_mcc, 1},
    {"_SLmetrics_phi_coefficient", (DL_FUNC) &_SLmetrics_phi_coefficient, 2},
    {"_SLmetrics_weighted_phi_coefficient", (DL_FUNC) &_SLmetrics_weighted_phi_coefficient, 3},
    {"_SLmetrics_cmatrix_phi_coefficient", (DL_FUNC) &_SLmetrics_cmatrix_phi_coefficient, 1},
    {"_SLmetrics_negative_likelihood_ratio", (DL_FUNC) &_SLmetrics_negative_likelihood_ratio, 2},
    {"_SLmetrics_weighted_negative_likelihood_ratio", (DL_FUNC) &_SLmetrics_weighted_negative_likelihood_ratio, 3},
    {"_SLmetrics_cmatrix_negative_likelihood_ratio", (DL_FUNC) &_SLmetrics_cmatrix_negative_likelihood_ratio, 1},
    {"_SLmetrics_negative_predictive_value", (DL_FUNC) &_SLmetrics_negative_predictive_value, 4},
    {"_SLmetrics_weighted_negative_predictive_value", (DL_FUNC) &_SLmetrics_weighted_negative_predictive_value, 5},
    {"_SLmetrics_cmatrix_negative_predictive_value", (DL_FUNC) &_SLmetrics_cmatrix_negative_predictive_value, 3},
    {"_SLmetrics_positive_likelihood_ratio", (DL_FUNC) &_SLmetrics_positive_likelihood_ratio, 2},
    {"_SLmetrics_weighted_positive_likelihood_ratio", (DL_FUNC) &_SLmetrics_weighted_positive_likelihood_ratio, 3},
    {"_SLmetrics_cmatrix_positive_likelihood_ratio", (DL_FUNC) &_SLmetrics_cmatrix_positive_likelihood_ratio, 1},
    {"_SLmetrics_precision", (DL_FUNC) &_SLmetrics_precision, 4},
    {"_SLmetrics_weighted_precision", (DL_FUNC) &_SLmetrics_weighted_precision, 5},
    {"_SLmetrics_cmatrix_precision", (DL_FUNC) &_SLmetrics_cmatrix_precision, 3},
    {"_SLmetrics_ppv", (DL_FUNC) &_SLmetrics_ppv, 4},
    {"_SLmetrics_weighted_ppv_score", (DL_FUNC) &_SLmetrics_weighted_ppv_score, 5},
    {"_SLmetrics_cmatrix_ppv_score", (DL_FUNC) &_SLmetrics_cmatrix_ppv_score, 3},
    {"_SLmetrics_precision_recall_curve", (DL_FUNC) &_SLmetrics_precision_recall_curve, 4},
    {"_SLmetrics_weighted_precision_recall_curve", (DL_FUNC) &_SLmetrics_weighted_precision_recall_curve, 5},
    {"_SLmetrics_precision_recall_auc", (DL_FUNC) &_SLmetrics_precision_recall_auc, 5},
    {"_SLmetrics_precision_recall_auc_weighted", (DL_FUNC) &_SLmetrics_precision_recall_auc_weighted, 6},
    {"_SLmetrics_recall_score", (DL_FUNC) &_SLmetrics_recall_score, 4},
    {"_SLmetrics_weighted_recall_score", (DL_FUNC) &_SLmetrics_weighted_recall_score, 5},
    {"_SLmetrics_cmatrix_recall_score", (DL_FUNC) &_SLmetrics_cmatrix_recall_score, 3},
    {"_SLmetrics_sensitivity_score", (DL_FUNC) &_SLmetrics_sensitivity_score, 4},
    {"_SLmetrics_weighted_sensitivity_score", (DL_FUNC) &_SLmetrics_weighted_sensitivity_score, 5},
    {"_SLmetrics_cmatrix_sensitivity_score", (DL_FUNC) &_SLmetrics_cmatrix_sensitivity_score, 3},
    {"_SLmetrics_true_positive_rate", (DL_FUNC) &_SLmetrics_true_positive_rate, 4},
    {"_SLmetrics_weighted_true_positive_rate", (DL_FUNC) &_SLmetrics_weighted_true_positive_rate, 5},
    {"_SLmetrics_cmatrix_true_positive_rate", (DL_FUNC) &_SLmetrics_cmatrix_true_positive_rate, 3},
    {"_SLmetrics_roc_curve_unweighted", (DL_FUNC) &_SLmetrics_roc_curve_unweighted, 4},
    {"_SLmetrics_roc_curve_weighted", (DL_FUNC) &_SLmetrics_roc_curve_weighted, 5},
    {"_SLmetrics_roc_auc", (DL_FUNC) &_SLmetrics_roc_auc, 5},
    {"_SLmetrics_roc_auc_weighted", (DL_FUNC) &_SLmetrics_roc_auc_weighted, 6},
    {"_SLmetrics_relative_entropy", (DL_FUNC) &_SLmetrics_relative_entropy, 4},
    {"_SLmetrics_shannon_entropy", (DL_FUNC) &_SLmetrics_shannon_entropy, 3},
    {"_SLmetrics_specificity", (DL_FUNC) &_SLmetrics_specificity, 4},
    {"_SLmetrics_weighted_specificity", (DL_FUNC) &_SLmetrics_weighted_specificity, 5},
    {"_SLmetrics_cmatrix_specificity", (DL_FUNC) &_SLmetrics_cmatrix_specificity, 3},
    {"_SLmetrics_true_negative_rate", (DL_FUNC) &_SLmetrics_true_negative_rate, 4},
    {"_SLmetrics_weighted_true_negative_rate", (DL_FUNC) &_SLmetrics_weighted_true_negative_rate, 5},
    {"_SLmetrics_cmatrix_true_negative_rate", (DL_FUNC) &_SLmetrics_cmatrix_true_negative_rate, 3},
    {"_SLmetrics_selectivity", (DL_FUNC) &_SLmetrics_selectivity, 4},
    {"_SLmetrics_weighted_selectivity", (DL_FUNC) &_SLmetrics_weighted_selectivity, 5},
    {"_SLmetrics_cmatrix_selectivity", (DL_FUNC) &_SLmetrics_cmatrix_selectivity, 3},
    {"_SLmetrics_zero_one_loss", (DL_FUNC) &_SLmetrics_zero_one_loss, 2},
    {"_SLmetrics_weighted_zero_one_loss", (DL_FUNC) &_SLmetrics_weighted_zero_one_loss, 3},
    {"_SLmetrics_cmatrix_zero_one_loss", (DL_FUNC) &_SLmetrics_cmatrix_zero_one_loss, 1},
    {"_SLmetrics_PoissonLogLoss", (DL_FUNC) &_SLmetrics_PoissonLogLoss, 3},
    {"_SLmetrics_weighted_PoissonLogLoss", (DL_FUNC) &_SLmetrics_weighted_PoissonLogLoss, 4},
    {"_SLmetrics_rsq", (DL_FUNC) &_SLmetrics_rsq, 3},
    {"_SLmetrics_weighted_rsq", (DL_FUNC) &_SLmetrics_weighted_rsq, 4},
    {"_SLmetrics_ccc", (DL_FUNC) &_SLmetrics_ccc, 3},
    {"_SLmetrics_weighted_ccc", (DL_FUNC) &_SLmetrics_weighted_ccc, 4},
    {"_SLmetrics_gamma_deviance", (DL_FUNC) &_SLmetrics_gamma_deviance, 2},
    {"_SLmetrics_weighted_gamma_deviance", (DL_FUNC) &_SLmetrics_weighted_gamma_deviance, 3},
    {"_SLmetrics_gmse", (DL_FUNC) &_SLmetrics_gmse, 2},
    {"_SLmetrics_weighted_gmse", (DL_FUNC) &_SLmetrics_weighted_gmse, 3},
    {"_SLmetrics_huberloss", (DL_FUNC) &_SLmetrics_huberloss, 3},
    {"_SLmetrics_weighted_huberloss", (DL_FUNC) &_SLmetrics_weighted_huberloss, 4},
    {"_SLmetrics_mae", (DL_FUNC) &_SLmetrics_mae, 2},
    {"_SLmetrics_weighted_mae", (DL_FUNC) &_SLmetrics_weighted_mae, 3},
    {"_SLmetrics_mape", (DL_FUNC) &_SLmetrics_mape, 2},
    {"_SLmetrics_weighted_mape", (DL_FUNC) &_SLmetrics_weighted_mape, 3},
    {"_SLmetrics_maape", (DL_FUNC) &_SLmetrics_maape, 2},
    {"_SLmetrics_weighted_maape", (DL_FUNC) &_SLmetrics_weighted_maape, 3},
    {"_SLmetrics_mpe", (DL_FUNC) &_SLmetrics_mpe, 2},
    {"_SLmetrics_weighted_mpe", (DL_FUNC) &_SLmetrics_weighted_mpe, 3},
    {"_SLmetrics_mse", (DL_FUNC) &_SLmetrics_mse, 2},
    {"_SLmetrics_weighted_mse", (DL_FUNC) &_SLmetrics_weighted_mse, 3},
    {"_SLmetrics_pinball", (DL_FUNC) &_SLmetrics_pinball, 4},
    {"_SLmetrics_weighted_pinball", (DL_FUNC) &_SLmetrics_weighted_pinball, 5},
    {"_SLmetrics_poisson_deviance", (DL_FUNC) &_SLmetrics_poisson_deviance, 2},
    {"_SLmetrics_weighted_poisson_deviance", (DL_FUNC) &_SLmetrics_weighted_poisson_deviance, 3},
    {"_SLmetrics_rae", (DL_FUNC) &_SLmetrics_rae, 2},
    {"_SLmetrics_weighted_rae", (DL_FUNC) &_SLmetrics_weighted_rae, 3},
    {"_SLmetrics_RelativeRootMeanSquaredError", (DL_FUNC) &_SLmetrics_RelativeRootMeanSquaredError, 3},
    {"_SLmetrics_weighted_RelativeRootMeanSquaredError", (DL_FUNC) &_SLmetrics_weighted_RelativeRootMeanSquaredError, 4},
    {"_SLmetrics_rmse", (DL_FUNC) &_SLmetrics_rmse, 2},
    {"_SLmetrics_weighted_rmse", (DL_FUNC) &_SLmetrics_weighted_rmse, 3},
    {"_SLmetrics_rmsle", (DL_FUNC) &_SLmetrics_rmsle, 2},
    {"_SLmetrics_weighted_rmsle", (DL_FUNC) &_SLmetrics_weighted_rmsle, 3},
    {"_SLmetrics_rrse", (DL_FUNC) &_SLmetrics_rrse, 2},
    {"_SLmetrics_weighted_rrse", (DL_FUNC) &_SLmetrics_weighted_rrse, 3},
    {"_SLmetrics_smape", (DL_FUNC) &_SLmetrics_smape, 2},
    {"_SLmetrics_weighted_smape", (DL_FUNC) &_SLmetrics_weighted_smape, 3},
    {"_SLmetrics_tweedie_deviance", (DL_FUNC) &_SLmetrics_tweedie_deviance, 3},
    {"_SLmetrics_weighted_tweedie_deviance", (DL_FUNC) &_SLmetrics_weighted_tweedie_deviance, 4},
    {"_SLmetrics_auc", (DL_FUNC) &_SLmetrics_auc, 4},
    {"_SLmetrics_openmp_available", (DL_FUNC) &_SLmetrics_openmp_available, 0},
    {"_SLmetrics_enable_openmp", (DL_FUNC) &_SLmetrics_enable_openmp, 0},
    {"_SLmetrics_disable_openmp", (DL_FUNC) &_SLmetrics_disable_openmp, 0},
    {"_SLmetrics_available_threads", (DL_FUNC) &_SLmetrics_available_threads, 0},
    {"_SLmetrics_use_threads", (DL_FUNC) &_SLmetrics_use_threads, 1},
    {"_SLmetrics_sort_matrix", (DL_FUNC) &_SLmetrics_sort_matrix, 2},
    {"_SLmetrics_order_matrix", (DL_FUNC) &_SLmetrics_order_matrix, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SLmetrics(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
