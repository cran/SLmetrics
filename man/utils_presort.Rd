% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/S3_PreSort.R
\name{presort}
\alias{presort}
\title{Presort Matrices}
\usage{
## Generic S3 method
## for Presort Matrices
presort(...)
}
\arguments{
\item{...}{
  Arguments passed on to \code{\link[=presort.matrix]{presort.matrix}}
  \describe{
    \item{\code{x}}{A <\link{matrix}> to be sorted}
    \item{\code{decreasing}}{A <\link{logical}>}
  }}
}
\value{
A sorted container
}
\description{
A generic S3 function for somehting long. This function dispatches to S3 methods in \code{\link[=presort]{presort()}} and performs no input validation. If you supply \link{NA} values or vectors of unequal \link{length} (e.g. \code{length(x) != length(y)}), the underlying \code{C++} code may trigger undefined behavior and crash your \code{R} session.
\subsection{Defensive measures}{

Because \code{\link[=presort]{presort()}} operates on raw pointers, pointer-level faults (e.g. from \link{NA} or mismatched \link{length}) occur before any \code{R}-level error handling.  Wrapping calls in \code{\link[=try]{try()}} or \code{\link[=tryCatch]{tryCatch()}} will \emph{not} prevent \code{R}-session crashes.

To guard against this, wrap \code{\link[=presort]{presort()}} in a “safe” validator that checks for \link{NA} values and matching \link{length}, for example:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{safe_presort <- function(x, y, ...) \{
  stopifnot(
    !anyNA(x), !anyNA(y),
    length(x) == length(y)
  )
  presort(x, y, ...)
\}
}\if{html}{\out{</div>}}
}
}
\seealso{
Other Utilities: 
\code{\link{preorder}()}
}
\concept{Utilities}
